"""
Задание 1.

Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init()__),
который должен принимать данные (список списков) для формирования матрицы.
[[], [], []]
Следующий шаг — реализовать перегрузку метода __str()__ для вывода матрицы в привычном виде.

Далее реализовать перегрузку метода __add()__ для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.

Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.

Пример:
1 2 3
4 5 6
7 8 9

1 2 3
4 5 6
7 8 9

Сумма матриц:
2 4 6
8 10 12
14 16 18
"""


class Matrix:
    def __init__(self, mtrx):
        self.mtrx = mtrx

    def __str__(self):
        result = []
        for i in self.mtrx:
            result.append(' '.join([str(j) for j in i]))
        return '\n'.join(result)

    def __add__(self, other):
        if len(self.mtrx) == len(other.mtrx):
            res = []
            for i, j in enumerate(self.mtrx):
                lst = list(map(lambda x, y: x + y, j, other.mtrx[i]))
                res.append(lst)
            return Matrix(res)
        return 'Матрицы не подходят для сложения'


m1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
m2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]

mx1 = Matrix(m1)
mx2 = Matrix(m2)
mx3 = mx1 + mx2

print(f'Матрица 1:\n{mx1}\n')
print(f'Матрица 2:\n{mx2}\n')
print(f'Сумма матриц:\n{mx3}\n')
